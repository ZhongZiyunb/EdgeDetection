#include <iostream>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui_c.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <vector>
#include <unistd.h>

using namespace std;
using namespace cv;
void OnMouseAction(int event,int x,int y,int flags,void *ustc);
cv::Point2f srcPts[4];
int cnt = 0;
cv::Mat src;
int main()
{
    //载入原图像
    src = cv::imread("../car.jpg", 1);
    if (src.empty())
    {
        cout << "原图像载入失败！" << endl;
        return -1;
    }

    cv::imshow("before",src);
    cv::setMouseCallback("before",OnMouseAction);
    cv::waitKey();

    //取车牌四边形四个顶点


//    srcPts[0] = cv::Point2f(602, 389);	//左上
//    srcPts[1] = cv::Point2f(596, 331);	//左下
//    srcPts[2] = cv::Point2f(774, 390);	//右上
//    srcPts[3] = cv::Point2f(765, 330);	//右下

    //计算原图中四个点的横纵坐标最大值小值,考虑位置特点,无需一一比较
    int MinX = std::min(srcPts[0].x, srcPts[1].x);
    int MaxX = std::max(srcPts[2].x, srcPts[3].x);
    int MinY = std::min(srcPts[0].y, srcPts[2].y);
    int MaxY = std::max(srcPts[1].y, srcPts[3].y);

    //根据最大最小坐标值设定目标图像中的矩形四个顶点,注意对应关系
    cv::Point2f dstPts[4];
    dstPts[0] = cv::Point2f(MinX, MinY);
    dstPts[1] = cv::Point2f(MinX, MaxY);
    dstPts[2] = cv::Point2f(MaxX, MinY);
    dstPts[3] = cv::Point2f(MaxX, MaxY);

    //计算透视变换矩阵
    cv::Mat perspectiveMat = getPerspectiveTransform(srcPts, dstPts);

    //对原图进行透视变换，完成车牌校正
    cv::Mat dst;
    cv::warpPerspective(src, dst, perspectiveMat, src.size());

    cv::imshow("finish",dst);

    cv::Mat image(src.rows, src.cols, CV_8UC3);//声明一个Mat实例，长宽高和srcImag一样
    dst(Rect(596,331,180,60)).copyTo(image);//copyTo()方法是深拷贝方法
    cv::imshow("ROI", dst);
    cv::imshow("ima", image);
    cv::cvtColor(image,image,COLOR_RGB2GRAY);
    cv::Canny(image,image,50,150);
    cv::imshow("canny",image);
    cv::waitKey(0);
    return 0;
}

int times=0;
void OnMouseAction(int event,int x,int y,int flags,void *ustc){
//    times++;
//    cout<<"the"<<times<<"th use the function"<<endl;
    if(event==CV_EVENT_MOUSEMOVE){}
    if(event==CV_EVENT_LBUTTONDOWN&&cnt==0){
        cnt++;
        srcPts[0] = cv::Point2f(x,y);
        cv::circle(src,cv::Point2f(x,y),2,cv::Scalar(0,0,255),5,8);
        cout<<"pressed"<<endl;
    }
    else if(event==CV_EVENT_LBUTTONDOWN&&cnt==1){
        cnt++;
        srcPts[1] = cv::Point2f(x,y);
        cv::circle(src,cv::Point2f(x,y),2,cv::Scalar(0,0,255),5,8);
        cout<<"pressed"<<endl;
    }
    else if(event==CV_EVENT_LBUTTONDOWN&&cnt==2){
        cnt++;
        srcPts[2] = cv::Point2f(x,y);
        cv::circle(src,cv::Point2f(x,y),2,cv::Scalar(0,0,255),5,8);
        cout<<"pressed"<<endl;
    }
    else if(event==CV_EVENT_LBUTTONDOWN&&cnt==3){
        cnt++;
        srcPts[3] = cv::Point2f(x,y);
        cv::circle(src,cv::Point2f(x,y),2,cv::Scalar(0,0,255),5,8);
        cout<<"pressed"<<endl;
    }
}
